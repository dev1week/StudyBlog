<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><parsererror xmlns="http://www.w3.org/1999/xhtml" style="display: block; white-space: pre; border: 2px solid #c77; padding: 0 1em 0 1em; margin: 1em; background-color: #fdd; color: black"><h3>This page contains the following errors:</h3><div style="font-family:monospace;font-size:12px">error on line 287 at column 328: Input is not proper UTF-8, indicate encoding !
Bytes: 0x08 0xEB 0x94 0x94
</div><h3>Below is a rendering of the page up to the first error.</h3></parsererror><channel><title><![CDATA[Hanju]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>Hanju</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 12 Dec 2024 15:52:29 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 12 Dec 2024 15:52:02 GMT</pubDate><copyright><![CDATA[1week]]></copyright><ttl>60</ttl><dc:creator>1week</dc:creator><item><title><![CDATA[ALB - Application Load Balancer]]></title><description><![CDATA[ 
 <br><br>
7계층에서 동작하는 로드밸런서 입니다. 트래픽을 균형있게 나누어줍니다.
<br><br>
트래픽을 여러 대상에 자동으로 분산시켜 안정적인 운용을 할 수 있습니다.
<br>
<br>EC2뿐만 아니라 컨테이너(ECS), 서버리스(Lambda) 등으로 다양한 서비스와 연계하여 부하를 분배할 수 있습니다.<br>

<br>서로 다른 EC2에 대한 하나의 엔드포인트를 제공합니다.<br>

<br>부하 분산 대상에 대한 헬스 체크, 고정 세션, ssl Offload, 다운서버 제외 기능을 제공합니다.<br>

<br><br><img src="https://hanju.gitbook.io/~gitbook/image?url=https%3A%2F%2F102830355-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FfNpWAsJfDNQXNBCChExd%252Fuploads%252FuEVaLGfjsShiUrHBYllh%252Fimage.png%3Falt%3Dmedia%26token%3Df5a11a54-fadd-49e5-ad48-5973920829bc&amp;width=768&amp;dpr=4&amp;quality=100&amp;sign=af6f198d520aed36cd5bd6b758108b905fd27ff37c455b31fa04467eb73f43e1" referrerpolicy="no-referrer"><br><a rel="noopener nofollow" class="external-link" href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/introduction.html" target="_blank">https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/introduction.html</a><br>
<br>
위 사진과 같이 Load Balancer, Listener, Target Group으로 나누어져 있습니다.

<br>
기본적으로 VPC에 탑재되며 사용자 요청을 받고, 이를 VPC 내의 리소스에 적절히 부하분산합니다.

<br>
외부의 요청을 받아들이는 리스너, 요청을 분산 전달할 수 있는 리소스의 집합인 대상그룹으로 구성됩니다.

<br>
ELB는 다수의 리스너와 대상 그룹을 거느릴 수 있습니다.

<br><a data-tooltip-position="top" aria-label="https://hanju.gitbook.io/studynote/aws/alb-application-load-balancer/undefined" rel="noopener nofollow" class="external-link" href="https://hanju.gitbook.io/studynote/aws/alb-application-load-balancer/undefined" target="_blank">PAGE구성요소</a><br><br>
<br>
앱의 트래픽을 여러 가용영역으로 분산합니다.

<br>
리스너를 이용해 RL, 호스트, 헤더, 메소드를 기반으로 규칙을 구성하여 요청을 처리할 수 있습니다.

<br>
트래픽 부하에 따라 자동으로 스케일 업, 다운을 수행할 수 있습니다.

<br>
하나 이상 타겟 그룹에 라우팅할 수 있으며 각 그룹별 가중치 설정이 가능합니다.

<br>
SSL Offloading을 지원합니다.

<br>
디폴트 알고리즘은 라운드 로빈이며, 최소 미해결 요청 라우팅 알고리즘을 지원합니다.

<br>
교차 영역 로드 밸런싱을 통해 AZ의 모든 타겟 그룹에 트래픽을 분산합니다.

<br><a data-href="고가용성 및 스케일링" href="고가용성 및 스케일링" class="internal-link" target="_self" rel="noopener nofollow">고가용성 및 스케일링</a>]]></description><link>0.-aws/1.-고가용성-및-스케일링/alb/alb.html</link><guid isPermaLink="false">0. AWS/1. 고가용성 및 스케일링/ALB/ALB.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 07:09:51 GMT</pubDate><enclosure url="https://hanju.gitbook.io/~gitbook/image?url=https%3A%2F%2F102830355-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FfNpWAsJfDNQXNBCChExd%252Fuploads%252FuEVaLGfjsShiUrHBYllh%252Fimage.png%3Falt%3Dmedia%26token%3Df5a11a54-fadd-49e5-ad48-5973920829bc&amp;width=768&amp;dpr=4&amp;quality=100&amp;sign=af6f198d520aed36cd5bd6b758108b905fd27ff37c455b31fa04467eb73f43e1" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://hanju.gitbook.io/~gitbook/image?url=https%3A%2F%2F102830355-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FfNpWAsJfDNQXNBCChExd%252Fuploads%252FuEVaLGfjsShiUrHBYllh%252Fimage.png%3Falt%3Dmedia%26token%3Df5a11a54-fadd-49e5-ad48-5973920829bc&amp;width=768&amp;dpr=4&amp;quality=100&amp;sign=af6f198d520aed36cd5bd6b758108b905fd27ff37c455b31fa04467eb73f43e1"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[고가용성]]></title><description><![CDATA[<a class="tag" href="?query=tag:AWS" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#AWS</a> 
 <br><br><br>
고가용성은 시스템이 예상치 못한 장애나 문제에도 계속해서 가용하고 작동하는 능력을 가리킵니다. 이는 시스템의 가용성을 유지하기 위해 여러 가용 영역에 걸쳐 리소스를 분산하는 등의 방법을 포함할 수 있습니다.
<br><br><br>
스케일링은 시스템이 사용자 또는 트래픽 증가에 유연하게 대응할 수 있는 능력을 의미합니다. 이는 자동으로 리소스를 확장하거나 축소하여 수요에 맞게 조정하는 것을 포함할 수 있습니다.
<br><br><br>
<br>Elastic Load Balancing (ELB):

<br>고가용성: ELB는 여러 가용 영역에 걸쳐 로드 밸런싱을 수행하여 장애 발생 시에도 트래픽을 안정적으로 분산합니다.
<br>스케일링: ELB는 Auto Scaling 그룹과 통합하여 자동으로 인스턴스를 확장하거나 축소하여 트래픽에 대응합니다.


<br>Amazon EC2 Auto Scaling:

<br>고가용성: Auto Scaling은 여러 가용 영역에 인스턴스를 배포하여 고가용성을 제공하며, 인스턴스 장애 시 자동으로 대체 인스턴스를 시작합니다.
<br>스케일링: Auto Scaling은 정의된 조건에 따라 자동으로 인스턴스를 확장하거나 축소하여 트래픽에 대응합니다.


<br>Amazon RDS Multi-AZ (Multi-Availability Zone) Deployment:

<br>고가용성: RDS Multi-AZ는 프라이머리 데이터베이스와 스탠바이 데이터베이스를 여러 가용 영역에 걸쳐 설정하여 장애 발생 시 자동으로 스위치하여 가용성을 제공합니다.
<br>스케일링: RDS는 수동 또는 자동 스케일링을 통해 데이터베이스 인스턴스의 크기를 조정할 수 있습니다.


<br><a data-href="ALB" href="0.-aws/1.-고가용성-및-스케일링/alb/alb.html" class="internal-link" target="_self" rel="noopener nofollow">ALB</a><br><a href=".?query=tag:AWS" class="tag" target="_blank" rel="noopener nofollow">#AWS</a>]]></description><link>0.-aws/1.-고가용성-및-스케일링/1.-고가용성-및-스케일링.html</link><guid isPermaLink="false">0. AWS/1. 고가용성 및 스케일링/1. 고가용성 및 스케일링.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 10:42:07 GMT</pubDate></item><item><title><![CDATA[0 CloudFormation]]></title><description><![CDATA[ 
 <br>1.Cloud Formation이란?<br>
AWS 리소스 생성 및 배포 자동화 템플릿 서비스입니다.
<br>
<br>AWS 리소스를 모델링하고 설정합니다.

<br>리소스 관리 시간을 줄일 수 있습니다.


<br>AWS 리소스를 설명하는 템플릿(=코드)를 생성하면 리소스의 프로비저닝과 구성을 담당합니다.
<br><br><br><img src="https://hanju.gitbook.io/~gitbook/image?url=https%3A%2F%2F102830355-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FfNpWAsJfDNQXNBCChExd%252Fuploads%252FSGEXGnQfYFl1GV94AXeZ%252Fimage.png%3Falt%3Dmedia%26token%3Dbc8a4eca-5c7a-4f79-bdfa-432e12b2e396&amp;width=768&amp;dpr=4&amp;quality=100&amp;sign=c1ce24f89c350ac9d93c8516d900243166fce2b0bc7954435800b0b33facf49a" referrerpolicy="no-referrer"><br>
<br>Cloud Front에서 실행하는 호출은 모두 템플릿으로 선언됩니다.
<br>해당 템플릿을 local이나 S3에 저장합니다.
<br>Cloudformation에서 템플릿을 활용해 AWS 리소스를 생성하고 스택을 생성합니다.
<br><br><br><br>
리소스 모음을 단일 단위(스택)으로 쉽게 관리할 수 있습니다.
<br><br>
각 개별 서비스를 사용하여 프로비저닝해야하고 서비스간 연동을 진행해야합니다. 모든 작업을 마치고 애플리케이션을 제대로 실행하려면 복잡하고 많은 시간이 소요됩니다.
<br><br>
모든 리소스와 속성을 설명하는 템플릿을 사용합니다. 템플릿을 사용하여 Cloudfront에서 스택을 생성할 경우 필요한 서비스를 자동으로 프로비저닝합니다. 스택의 삭제, 관리가 용이합니다.
<br><br>
가용성을 확대해야하는 경우 여러 리전에서 애플리케이션을 복제할 수 있습니다.
<br><br>
복제시, 애플리케이션에 필요한 모든 AWS 서비스를 숙지, 각 리전에서 해당 서비스를 다시 구성해야합니다.
<br><br>
템플릿을 재사용하여 리소스를 일관되고 반복적으로 생산할 수 있습니다. 또한 여러 리전에서 동일한 리소스를 반복적으로 프로비저닝할 수 있습니다.
<br><br><br>
애플리케이션을 업데이트하고 문제가 발생할 경우 원래 설정으로 롤백해야합니다.<br>
변경된 리소스를 기억하고 원래 설정을 알고 다시 수동으로 복구해야합니다.
<br><br>
템플릿에서 차이점을 추적하여 인프라 변경사항을 추적할 수 있습니다. 형상관리시스템(git)을 활용하여 변경 내용, 변경 시간, 변경한 사람을 정확히 알 수 있습니다. 이전 버전으로 되돌려야할 경우 이전 버전의 템플릿을 사용하면 됩니다.
<br><br><br>
<br>
리소스에 대한 이해가 낮으면 사용하기가 어렵습니다.

<br>
배포에 필요한 모든 옵션을 직접 활용하기에는 설정이 많습니다.<br>


<br>
json, yaml 문법에서 각 참조 방식이 난해합니다.

<br>java같은 곳에서는 ctrl 키를 눌러 해당 함수의 구현체로 바로 이동이 가능합니다.
<br>반면에 json은 데이터를 표현하는 포멧이기 때문에 참조값 추적이 난해합니다.


<br>]]></description><link>0.-aws/1.-iac/cloudformation/0-cloudformation.html</link><guid isPermaLink="false">0. AWS/1. IaC/CloudFormation/0 CloudFormation.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 10:42:28 GMT</pubDate><enclosure url="https://hanju.gitbook.io/~gitbook/image?url=https%3A%2F%2F102830355-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FfNpWAsJfDNQXNBCChExd%252Fuploads%252FSGEXGnQfYFl1GV94AXeZ%252Fimage.png%3Falt%3Dmedia%26token%3Dbc8a4eca-5c7a-4f79-bdfa-432e12b2e396&amp;width=768&amp;dpr=4&amp;quality=100&amp;sign=c1ce24f89c350ac9d93c8516d900243166fce2b0bc7954435800b0b33facf49a" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://hanju.gitbook.io/~gitbook/image?url=https%3A%2F%2F102830355-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FfNpWAsJfDNQXNBCChExd%252Fuploads%252FSGEXGnQfYFl1GV94AXeZ%252Fimage.png%3Falt%3Dmedia%26token%3Dbc8a4eca-5c7a-4f79-bdfa-432e12b2e396&amp;width=768&amp;dpr=4&amp;quality=100&amp;sign=c1ce24f89c350ac9d93c8516d900243166fce2b0bc7954435800b0b33facf49a"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[스택]]></title><description><![CDATA[ 
 <br><br>
CloudFormation에서는 스택이라는 하나의 단위로 리소스들을 관리합니다.
<br><br>
<br>스택이라는 하나의 단위로 리소스를 관리합니다.<br>

<br>스택의 모든 리소스는 스택의 CloudFormation 템플릿으로 정의합니다.<br>

<br>스택에서 실행 중인 리소스를 변경해야하는 경우 스택을 업데이트합니다.<br>

<br><br>
스택의 설정을 변경하거나 리소스를 변경하는 경우 스택 업데이트를 이용해서 간편하게 변경할 수 있습니다.
<br><br><a data-tooltip-position="top" aria-label="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#id-2-1" rel="noopener nofollow" class="external-link" href="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#id-2-1" target="_blank"></a><br>2-1. 원리<br>
<br>변경사항(새 입력 파라미터 값 또는 업데이트된 템플릿)을 작성합니다.
<br>CloudFormation에서는 제출한 변경사항과 스택의 현재 상태를 비교하여 변경된 리소스만 업데이트합니다.
<br><br><a data-tooltip-position="top" aria-label="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#id-2-2" rel="noopener nofollow" class="external-link" href="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#id-2-2" target="_blank"></a><br>2-2. 업데이트 방법<br>
직접 업데이트와 변경 세트 생성 및 실행 총 두 가지 방법을 제공합니다.
<br><br><a data-tooltip-position="top" aria-label="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#a" rel="noopener nofollow" class="external-link" href="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#a" target="_blank"></a><br>a. 스택을 직접 업데이트<br>
<br>변경사항을 제출합니다.<br>

<br>AWS CloudFormation에서 즉시 해당사항을 배포합니다.<br>

<br>업데이트를 빠르게 배포할 때 사용합니다.<br><br><a data-tooltip-position="top" aria-label="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#b" rel="noopener nofollow" class="external-link" href="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#b" target="_blank"></a><br>b. 변경 세트 사용<br>
<br>AWS CloudFormation에서 스택에 대해 변경사항을 미리 확인합니다.
<br>변경사항을 적용할지 결정합니다.
<br><br><a data-tooltip-position="top" aria-label="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#id-2-3" rel="noopener nofollow" class="external-link" href="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#id-2-3" target="_blank"></a><br>2-3 스택 리소스의 업데이트 동작<br>
업데이트한 리소스의 경우 AWS CloudFormation에서는 다음 동작 중 하나를 사용합니다.
<br><br><a data-tooltip-position="top" aria-label="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#a-1" rel="noopener nofollow" class="external-link" href="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#a-1" target="_blank"></a><br>a.업데이트(무중단)<br>
해당 리소스의 작동을 중단하지 않고, 리소스의 물리적 ID를 변경하지 않는 상태에서 리소스를 업데이트합니다.
<br><br><a data-tooltip-position="top" aria-label="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#b-1" rel="noopener nofollow" class="external-link" href="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#b-1" target="_blank"></a><br>b.업데이트(중단)<br>
리소스를 업데이트하지만, 다소 중단이 발생합니다.
<br><br><a data-tooltip-position="top" aria-label="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#c" rel="noopener nofollow" class="external-link" href="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#c" target="_blank"></a><br>c.대체<br>
업데이트 도중 리소스를 다시 생성하며, 물리적 ID도 생성합니다.
<br>일반적인 방법은 아래와 같습니다.<br>
<br>리소스를 먼저 생성합니다.
<br>대체 리소스를 가리키도록 종속 리소스의 참조를 변경합니다
<br>이전 리소스를 삭제합니다.
<br>AWS 리소스 유형에 따라 업데이트하는 속성이 달라집니다. 각 속성에 대한 업데이트 동작은 <a data-tooltip-position="top" aria-label="https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html" rel="noopener nofollow" class="external-link" href="https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html" target="_blank">AWS 리소스 유형 참조</a>에 설명되어 있습니다.<br><br><a data-tooltip-position="top" aria-label="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#id-2-3.-aws" rel="noopener nofollow" class="external-link" href="https://hanju.gitbook.io/studynote/aws/iac/cloud-formation/undefined-1#id-2-3.-aws" target="_blank"></a><br>2-3. AWS 리소스를 대체해야하는 경우 설정하기<br>
RDS의 Port를 업데이트하는 경우 CloudFormation에서는 업데이트된 포트 설정을 사용하여 새 DB 인스턴스를 생성하고 대체하여 무중단 배포를 구성할 수 있습니다. 방법은 아래와 같습니다.
<br>
<br>현재 DB의 스냅샷을 생성합니다.
<br>DB 인스턴스를 바꾸는 동안 해당 DB를 사용하는 앱에서 중단을 처리할 방법을 준비합니다.
<br>앱에서 업데이트된 포트 설정과 기타 고려사항이 적용되었는지 확인합니다.
<br>DB 스냅샷을 사용하여 새 DB 인스턴스에서 정보를 복원합니다.
]]></description><link>0.-aws/1.-iac/cloudformation/스택.html</link><guid isPermaLink="false">0. AWS/1. IaC/CloudFormation/스택.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 06:53:02 GMT</pubDate></item><item><title><![CDATA[템플릿이란?]]></title><description><![CDATA[ 
 <br><br><br>
AWS 리소스 구축을 위한 청사진입니다.
<br>
<br>.json, .yaml, .template, .txt 등을 사용합니다.
<br><br><br>
ami-0ff8a91507f77f867 AMI ID, t2.micro 인스턴스 유형, testkey 키 페어 이름 및 Amazon EBS 볼륨을 사용하여 인스턴스를 프로비저닝하는 예시입니다.
<br><br>{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "A sample template",
    "Resources": {
        "MyEC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-0ff8a91507f77f867",
                "InstanceType": "t2.micro",
                "KeyName": "testkey",
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sdm",
                        "Ebs": {
                            "VolumeType": "io1",
                            "Iops": 200,
                            "DeleteOnTermination": false,
                            "VolumeSize": 20
                        }
                    }
                ]
            }
        }
    }
}
<br><br>AWSTemplateFormatVersion: 2010-09-09
Description: A sample template
Resources:
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0ff8a91507f77f867
      InstanceType: t2.micro
      KeyName: testkey
      BlockDeviceMappings:
        - DeviceName: /dev/sdm
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: false
            VolumeSize: 20
<br><br><br>
템플릿에는 여러 주요 섹션이 포함되어 있습니다.
<br>
<br>Resources 섹션만 필수 섹션입니다.<br>

<br><br>
기본적으로는 임의 순서대로 지정이 가능하지만, 이전 섹션을 참고할 수 있습니다. 때문의 다음 순서를 사용하는 것이 좋습니다.
<br><br><br><br><br>
AWSTemplateFormatVersion 섹션은 템플릿의 기능을 식별합니다. 최신 템플릿 포맷 버전은 2010-09-09이며 현재 유일한 유효 값입니다.
<br>
<br>값을 지정하지 않을 경우 최신 버전이라고 가정합니다.<br>

<br>리터럴 문자이어야합니다.<br>

<br>파라미터나 함수를 사용해 포맷 버전을 지정할 수 있습니다.<br>

<br><br>"AWSTemplateFormatVersion" : "2010-09-09"
<br><br>AWSTemplateFormatVersion: "2010-09-09"
<br><br>
템플릿의 Description 섹션(선택 사항)에 템플릿에 대한 설명을 지정합니다.
<br>
<br>0~1023 바이트 길이의 리터럴 문자열이어야 합니다.
<br>파라미터나 함수를 사용할 수 없습니다.
<br>업데이트 중 수정이 불가능합니다.
<br><br>"Description" : "Here are some details about the template."
<br><br>Description: &gt;
  Here are some
  details about
  the template.
]]></description><link>0.-aws/1.-iac/cloudformation/템플릿.html</link><guid isPermaLink="false">0. AWS/1. IaC/CloudFormation/템플릿.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 07:01:53 GMT</pubDate></item><item><title><![CDATA[<font color="#8064a2">IaC Overview</font>]]></title><description><![CDATA[<a class="tag" href="?query=tag:AWS" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#AWS</a> 
 <br><br><br>IaC는 "Infrastructure as Code"의 약자로, 인프라스트럭처를 코드로 정의하고 관리하는 방식을 가리킵니다. 이는 개발자나 시스템 관리자가 코드를 사용하여 인프라 리소스를 프로비저닝하고 구성하는 것을 의미합니다.<br><br><br>
<br>
일관성: 코드로 정의된 인프라는 반복 가능하며, 인프라 구성이 일관되고 예측 가능하게 됩니다.

<br>
자동화: 코드를 통해 인프라를 프로비저닝하고 구성함으로써, 반복적이고 수동적인 작업을 자동화할 수 있습니다.

<br>
버전 관리: 코드로 정의된 인프라는 버전 관리 시스템을 통해 관리될 수 있으며, 변경 이력을 추적하고 롤백할 수 있습니다.

<br>
안정성: IaC를 사용하면 실수를 줄이고, 변경 사항에 대한 테스트 및 검증을 수행할 수 있으므로 시스템의 안정성이 향상됩니다.

<br>
유연성: 코드로 정의된 인프라는 변경에 대응하기 쉽습니다. 새로운 요구 사항이나 확장성이 필요한 경우 코드를 수정하여 인프라를 업데이트할 수 있습니다.

<br><br><br>주요한 IaC 도구로는 AWS CloudFormation, Terraform, Ansible, Chef, Puppet 등이 있습니다. 이러한 도구들을 사용하여 개발자와 운영팀은 코드를 통해 인프라를 효율적으로 관리하고 운영할 수 있습니다.<br><a href=".?query=tag:AWS" class="tag" target="_blank" rel="noopener nofollow">#AWS</a><br><a data-href="0 CloudFormation" href="0.-aws/1.-iac/cloudformation/0-cloudformation.html" class="internal-link" target="_self" rel="noopener nofollow">0 CloudFormation</a>]]></description><link>0.-aws/1.-iac/1.-iac.html</link><guid isPermaLink="false">0. AWS/1. IaC/1. IaC.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 14:40:31 GMT</pubDate></item><item><title><![CDATA[AWS]]></title><description><![CDATA[<a class="tag" href="?query=tag:Root" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Root</a> 
 <br><br>AWS는 "Amazon Web Services"의 약자로, 아마존이 제공하는 클라우드 컴퓨팅 플랫폼 및 서비스를 가리킵니다. AWS는 인프라스트럭처(서버, 스토리지, 네트워킹 등)부터 데이터베이스, 인공지능, 머신 러닝, 개발 도구, 보안, 분석, 그리고 IoT와 같은 다양한 기술 스택을 제공합니다. 이를 통해 기업이나 개발자들은 필요한 인프라를 프로비저닝하고 애플리케이션을 배포하며, 스케일링하고 관리하는 등의 작업을 AWS의 클라우드 플랫폼을 통해 수행할 수 있습니다. <br><br>
<br>확장성 및 유연성: AWS는 필요에 따라 리소스를 확장하거나 축소할 수 있는 유연한 인프라를 제공합니다. 개발자는 애플리케이션의 수요가 변할 때 쉽게 대응할 수 있습니다.
<br>다양한 서비스: AWS는 다양한 서비스를 제공하여 개발자가 필요로 하는 모든 것을 하나의 플랫폼에서 제공합니다. 데이터베이스, 스토리지, 컴퓨팅, 인공지능, 머신 러닝, 보안, IoT 등의 다양한 서비스를 활용할 수 있습니다.
<br>비용 효율성: AWS는 사용한 만큼 비용을 지불하는 Pay-As-You-Go 모델을 채택하고 있어, 개발자는 실제로 사용한 리소스에 대해서만 비용을 지불하게 됩니다. 또한 예약 인스턴스 및 스팟 인스턴스와 같은 할인 모델도 제공하여 비용을 절감할 수 있습니다.
<br>보안: AWS는 업계 표준을 준수하며, 다양한 보안 도구 및 서비스를 제공하여 개발자가 애플리케이션을 안전하게 운영할 수 있도록 지원합니다. 이는 데이터 보안, 네트워크 보안, 액세스 제어 및 모니터링 등을 포함합니다.
<br>글로벌 인프라: AWS는 전 세계에 걸쳐 다양한 리전과 가용 영역을 제공하여 개발자가 애플리케이션을 전 세계적으로 배포하고 사용자에게 접근할 수 있도록 합니다.
<br>자동화 및 관리: AWS는 다양한 자동화 도구와 관리 서비스를 제공하여 개발자가 애플리케이션을 효율적으로 관리하고 유지보수할 수 있도록 지원합니다. 예를 들어, AWS Elastic Beanstalk, AWS Lambda, AWS CloudFormation 등의 서비스를 통해 개발 및 배포 과정을 자동화할 수 있습니다.
<br><a data-href="1. 고가용성 및 스케일링" href="0.-aws/1.-고가용성-및-스케일링/1.-고가용성-및-스케일링.html" class="internal-link" target="_self" rel="noopener nofollow">1. 고가용성 및 스케일링</a><br>
<a data-href="1. IaC" href="0.-aws/1.-iac/1.-iac.html" class="internal-link" target="_self" rel="noopener nofollow">1. IaC</a><br><a href=".?query=tag:Root" class="tag" target="_blank" rel="noopener nofollow">#Root</a>]]></description><link>0.-aws/0.-aws.html</link><guid isPermaLink="false">0. AWS/0. AWS.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 14:40:47 GMT</pubDate></item><item><title><![CDATA[구조 패턴]]></title><description><![CDATA[ 
 <br><br>
클래스와 객체를 효율적으로 구성하여 더 큰 구조를 형성하고, 서로 간의 관계를 단순화하고 유연하게 만드는 디자인 패턴의 한 유형입니다.
<br><br>
<br><a data-href="데코레이터" href="0.-clean-code/1.-design-pattern/2.-구조-패턴/데코레이터.html" class="internal-link" target="_self" rel="noopener nofollow">데코레이터</a>: 객체에 동적으로 새로운 행동이나 상태를 추가할 수 있게 해주는 패턴.
<br><a data-href="복합체" href="0.-clean-code/1.-design-pattern/2.-구조-패턴/복합체.html" class="internal-link" target="_self" rel="noopener nofollow">복합체</a>(Composite): 객체들을 트리 구조로 구성하여 부분-전체 계층을 구현하고, 개별 객체와 복합 객체를 동일하게 다루는 패턴.
<br><a data-href="브리지" href="0.-clean-code/1.-design-pattern/2.-구조-패턴/브리지.html" class="internal-link" target="_self" rel="noopener nofollow">브리지</a>(Bridge): 추상적인 부분과 구체적인 구현 부분을 분리하여 독립적으로 변형할 수 있게 해주는 패턴.
<br><a data-href="어댑터" href="0.-clean-code/1.-design-pattern/2.-구조-패턴/어댑터.html" class="internal-link" target="_self" rel="noopener nofollow">어댑터</a> (Adapter): 기존 인터페이스를 다른 인터페이스로 변환하여 호환되지 않는 인터페이스들 간의 협력을 가능하게 해주는 패턴.
<br><a data-href="파사드" href="0.-clean-code/1.-design-pattern/2.-구조-패턴/파사드.html" class="internal-link" target="_self" rel="noopener nofollow">파사드</a> (Facade): 서브시스템에 대한 간단한 인터페이스를 제공하여 복잡한 서브시스템을 쉽게 사용할 수 있게 해주는 패턴.
<br><a data-href="프록시" href="0.-clean-code/1.-design-pattern/2.-구조-패턴/프록시.html" class="internal-link" target="_self" rel="noopener nofollow">프록시</a> (Proxy): 다른 객체에 대한 접근을 제어하기 위해 대리자나 자리 채움 객체를 제공하는 패턴.
<br><a data-href="플라이웨이트" href="0.-clean-code/1.-design-pattern/2.-구조-패턴/플라이웨이트.html" class="internal-link" target="_self" rel="noopener nofollow">플라이웨이트</a> (Flyweight): 다수의 작은 객체들을 효율적으로 지원하기 위해 공유를 통해 메모리를 절약하는 패턴.
<br> : ]]></description><link>0.-clean-code/1.-design-pattern/2.-구조-패턴/2.-구조-패턴.html</link><guid isPermaLink="false">0. Clean Code/1. Design Pattern/2. 구조 패턴/2. 구조 패턴.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 12:00:12 GMT</pubDate></item><item><title><![CDATA[데코레이터]]></title><description><![CDATA[ 
 ]]></description><link>0.-clean-code/1.-design-pattern/2.-구조-패턴/데코레이터.html</link><guid isPermaLink="false">0. Clean Code/1. Design Pattern/2. 구조 패턴/데코레이터.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 11:05:49 GMT</pubDate></item><item><title><![CDATA[플라이웨이트]]></title><description><![CDATA[ 
 ]]></description><link>0.-clean-code/1.-design-pattern/2.-구조-패턴/플라이웨이트.html</link><guid isPermaLink="false">0. Clean Code/1. Design Pattern/2. 구조 패턴/플라이웨이트.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 11:06:02 GMT</pubDate></item><item><title><![CDATA[생성 패턴]]></title><description><![CDATA[ 
 <br><br>
객체 생성 메커니즘을 다루는 디자인 패턴의 한 유형입니다.
<br><br>
<br><a data-href="빌더" href="0.-clean-code/1.-design-pattern/2.-생성-패턴/빌더.html" class="internal-link" target="_self" rel="noopener nofollow">빌더</a> (Builder): 객체의 생성 과정을 단계별로 나누고, 다양한 표현을 통해 동일한 생성 절차를 수행할 수 있게 하는 패턴.
<br><a data-href="싱글톤" href="0.-clean-code/1.-design-pattern/2.-생성-패턴/싱글톤.html" class="internal-link" target="_self" rel="noopener nofollow">싱글톤</a> (Singleton): 클래스의 인스턴스를 하나만 생성하여 전역에서 접근할 수 있도록 보장하는 패턴.
<br><a data-href="추상 팩토리" href="0.-clean-code/1.-design-pattern/2.-생성-패턴/추상-팩토리.html" class="internal-link" target="_self" rel="noopener nofollow">추상 팩토리</a> (Abstract Factory): 관련된 객체들을 구체적인 클래스에 의존하지 않고 생성할 수 있게 해주는 인터페이스를 제공하는 패턴.
<br><a data-href="팩토리" href="0.-clean-code/1.-design-pattern/2.-생성-패턴/팩토리.html" class="internal-link" target="_self" rel="noopener nofollow">팩토리</a>(Factory Method): 객체 생성을 서브클래스에서 정의할 수 있도록 하여 객체 생성의 인터페이스를 정의하지만, 실제 객체 생성은 서브클래스에서 처리하는 패턴.
<br><a data-href="프로토타입" href="0.-clean-code/1.-design-pattern/2.-생성-패턴/프로토타입.html" class="internal-link" target="_self" rel="noopener nofollow">프로토타입</a>(Prototype): 새 객체를 생성할 때, 기존 객체를 복사하여 생성하는 패턴.
]]></description><link>0.-clean-code/1.-design-pattern/2.-생성-패턴/2.-생성-패턴.html</link><guid isPermaLink="false">0. Clean Code/1. Design Pattern/2. 생성 패턴/2. 생성 패턴.md</guid><dc:creator><![CDATA[1week]]></dc:creator><pubDate>Sun, 02 Jun 2024 11:58:52 GMT</pubDate></item><item><title><![CDATA[문제]]></title><description/></item></channel></rss>